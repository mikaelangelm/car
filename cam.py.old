# import cv2
from fcntl import ioctl
import mmap
import numpy as np
import os
import struct
# import v4l2
from PIL import Image
import time
from picamera import PiCamera

NUM_BUFFERS = 10


class Camera(object):
    def __init__(self, device_name):
        self.device_name = device_name
        self.open_device()
        self.init_device()

    def open_device(self):
        self.fd = os.open(self.device_name, os.O_RDWR, 0)

    def init_device(self):
        cap = v4l2.v4l2_capability()
        fmt = v4l2.v4l2_format()
        
        # https://russianblogs.com/article/3754255096/#v4l2_15
        if ioctl(self.fd, v4l2.VIDIOC_QUERYCAP, cap) < 0:
            print('VIDIOC_QUERYCAP failed')
        
        if not (cap.capabilities & v4l2.V4L2_CAP_VIDEO_CAPTURE):
            raise Exception("{} is not a video capture device".format(self.device_name))
        
#         input_ = v4l2.v4l2_input
#         input_.index = 0
#         _ = ioctl(self.fd, v4l2.VIDIOC_G_STD, input_.index)
#         print((input_.name.offset)) # input_.name) # fmt.fmt.pix.width)
        
        fmt.type = v4l2.V4L2_BUF_TYPE_VIDEO_CAPTURE
#         fmt.fmt.pix.pixelformat = v4l2.V4L2_PIX_FMT_RGB24
#         https://www.kernel.org/doc/html/v4.14/media/uapi/v4l/capture.c.html
        fmt.fmt.pix.width       = 720
        fmt.fmt.pix.height      = 1280
        if ioctl(self.fd, v4l2.VIDIOC_S_FMT, fmt) < 0:
            print("set fmt failed!", _)
        
        ioctl(self.fd, v4l2.VIDIOC_G_FMT, fmt)
        
        self.init_mmap()
    
    def init_mmap(self):
        req = v4l2.v4l2_requestbuffers()
        
        req.count = NUM_BUFFERS
        req.type = v4l2.V4L2_BUF_TYPE_VIDEO_CAPTURE
        req.memory = v4l2.V4L2_MEMORY_MMAP
        
        try:
            ioctl(self.fd, v4l2.VIDIOC_REQBUFS, req)
        except Exception:
            raise Exception("video buffer request failed")
        
        if req.count < 2:
            raise Exception("Insufficient buffer memory on {}".format(self.device_name))

        self.buffers = []
        for x in range(req.count):
            buf = v4l2.v4l2_buffer()
            buf.type = v4l2.V4L2_BUF_TYPE_VIDEO_CAPTURE
            buf.memory = v4l2.V4L2_MEMORY_MMAP
            buf.index = x
            
            ioctl(self.fd, v4l2.VIDIOC_QUERYBUF, buf)

            buf.buffer =  mmap.mmap(self.fd, buf.length, mmap.PROT_READ, mmap.MAP_SHARED, offset=buf.m.offset)
            self.buffers.append(buf)

    def start_capturing(self):
        for buf in self.buffers:
            ioctl(self.fd, v4l2.VIDIOC_QBUF, buf)
        video_type = v4l2.V4L2_BUF_TYPE_VIDEO_CAPTURE
        ioctl(self.fd, v4l2.VIDIOC_STREAMON, struct.pack('I', video_type))
        self.main_loop()
    
    def process_image(self, buf):
        video_buffer = self.buffers[buf.index].buffer
        data = video_buffer.read(buf.bytesused)
        try:
            data_ = np.frombuffer(data, dtype=np.uint8).reshape((960, -1)).T.T # -1, 1280 # 320, 640, 3
            print(data_.shape, len(data))
            im = Image.fromarray(data_)#.convert('RGB')
            im.save('/home/pi/Desktop/Py/your_file' + time.time().__str__() + '.jpeg')
#             with open("/home/pi/Desktop/Py/del.txt", "w", encoding='utf-8') as file:
#                 file.write(str(data_.tolist()))
#             print(len(list(str(data_.tolist()))))
        except Exception as e:
            # Not entirely sure what Exceptions I'm looking for here, potentially a bad read?
            print(e)


    def main_loop(self):
        for x in range(1):
            print('grabbing frame', x)
            buf = self.buffers[x % NUM_BUFFERS]
            ioctl(self.fd, v4l2.VIDIOC_DQBUF, buf)
            self.process_image(buf)
            ioctl(self.fd, v4l2.VIDIOC_QBUF, buf)


if False or __name__ == "__main__":
    raspi_not_usb = True
    if raspi_not_usb:
        # https://picamera.readthedocs.io/en/release-1.13/recipes1.html
        cam = PiCamera()
        # Запускаем предпросмотр сигнала с камеры на экране поверх всех окон cam.start_preview() cam.stop_preview()
        # PHOTO
        time.sleep(2) # AF & WB
        cam.capture('/home/pi/Desktop/image-example.jpg')
        
        # VIDEO 5 sec пишем потоковое видео
#         cam.start_recording('/home/pi/Desktop/video-example.h264')
#         cam.wait_recording(5)
#         cam.stop_recording()
        
    else:
        cam = Camera("/dev/video0")
        cam.start_capturing()